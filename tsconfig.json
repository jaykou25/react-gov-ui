{
  "include": ["src/**/*"],
  "exclude": ["node_modules"],
  "compilerOptions": {
    /* 访问 https://aka.ms/tsconfig 了解有关此文件的更多信息 */
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* 项目选项 */
    /* Projects */
    // "incremental": true,                              /* 保存 .tsbuildinfo 文件以允许项目的增量编译。 */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* 启用约束，允许TypeScript项目与项目引用一起使用。 */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 指定 .tsbuildinfo 增量编译文件的路径。 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 引用复合项目时，禁止优先使用源文件而非声明文件。 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* 在编辑时将项目排除在多项目引用检查之外。 */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* 减少TypeScript自动加载的项目数量。 */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* 语言和环境 */
    /* Language and Environment */
    /* 设置生成的JavaScript代码的JavaScript语言版本，并包含兼容的库声明。 */
    "target": "es2016" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    // "lib": [],                                        /* 指定描述目标运行时环境的一组捆绑库声明文件。 */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    "jsx": "react-jsx" /* 指定生成什么JSX代码。 */,
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "libReplacement": true,                           /* 启用lib替换。 */
    // "libReplacement": true,                           /* Enable lib replacement. */
    // "experimentalDecorators": true,                   /* 启用对传统实验性装饰器的实验性支持。 */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* 为源文件中的装饰声明发出设计类型元数据。 */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* 指定在针对React JSX发射时使用的JSX工厂函数，例如'React.createElement'或'h'。 */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* 指定在针对React JSX发射时用于片段的JSX片段引用，例如'React.Fragment'或'Fragment'。 */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* 指定在使用'jsx: react-jsx*'时用于导入JSX工厂函数的模块说明符。 */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* 指定调用'createElement'的对象。这仅适用于针对'react' JSX发射。 */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* 禁止包含任何库文件，包括默认的lib.d.ts。 */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* 发出符合ECMAScript标准的类字段。 */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* 控制用于检测模块格式JS文件的方法。 */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* 模块 */
    /* Modules */
    "module": "commonjs" /* 指定生成的模块代码。 */,
    // "module": "commonjs",                                /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* 指定源文件中的根文件夹。 */
    "rootDir": "./src" /* Specify the root folder within your source files. */,
    // "moduleResolution": "node10",                     /* 指定TypeScript如何从给定的模块说明符查找文件。 */
    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* 指定用于解析非相对模块名称的基本目录。 */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* 指定一组将导入重新映射到其他查找位置的条目。 */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* 允许在解析模块时将多个文件夹视为一个文件夹。 */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* 指定充当'./node_modules/@types'的多个文件夹。 */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* 指定要包含但未在源文件中引用的类型包名称。 */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* 允许从模块访问UMD全局变量。 */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* 解析模块时要搜索的文件名后缀列表。 */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* 允许导入包含TypeScript文件扩展名。需要设置'--moduleResolution bundler'和'--noEmit'或'--emitDeclarationOnly'。 */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "rewriteRelativeImportExtensions": true,          /* 在输出文件中将相对导入路径中的'.ts'、'.tsx'、'.mts'和'.cts'文件扩展名重写为它们的JavaScript等效项。 */
    // "rewriteRelativeImportExtensions": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */
    // "resolvePackageJsonExports": true,                /* 解析包导入时使用package.json的'exports'字段。 */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* 解析导入时使用package.json的'imports'字段。 */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* 在解析导入时，除了解析器特定的默认值外，还要设置的条件。 */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "noUncheckedSideEffectImports": true,             /* 检查副作用导入。 */
    // "noUncheckedSideEffectImports": true,             /* Check side effect imports. */
    // "resolveJsonModule": true,                        /* 启用导入.json文件。 */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* 启用导入任何扩展名的文件，前提是存在声明文件。 */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* 禁止'import'、'require'或'<reference>'扩展TypeScript应该添加到项目中的文件数量。 */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript支持 */
    /* JavaScript Support */
    // "allowJs": true,                                  /* 允许JavaScript文件成为程序的一部分。使用'checkJS'选项从这些文件获取错误。 */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* 在类型检查的JavaScript文件中启用错误报告。 */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* 指定用于检查'node_modules'中JavaScript文件的最大文件夹深度。仅适用于'allowJs'。 */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* 输出 */
    /* Emit */
    // "declaration": true,                              /* 从项目中的TypeScript和JavaScript文件生成.d.ts文件。 */
    "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
    // "declarationMap": true,                           /* 为d.ts文件创建源映射。 */
    "declarationMap": true /* Create sourcemaps for d.ts files. */,
    // "emitDeclarationOnly": true,                      /* 只输出d.ts文件而不输出JavaScript文件。 */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* 为生成的JavaScript文件创建源映射文件。 */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* 在生成的JavaScript内包含源映射文件。 */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "noEmit": true,                                   /* 禁止从编译中生成文件。 */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "outFile": "./",                                  /* 指定将所有输出捆绑到一个JavaScript文件中的文件。如果'declaration'为true，还指定捆绑所有.d.ts输出的文件。 */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    // "outDir": "./",                                   /* 为所有生成的文件指定输出文件夹。 */
    "outDir": "./dist" /* Specify an output folder for all emitted files. */,
    // "removeComments": true,                           /* 禁止生成注释。 */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "importHelpers": true,                            /* 允许每个项目从tslib导入一次辅助函数，而不是在每个文件中包含它们。 */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "downlevelIteration": true,                       /* 为迭代生成更符合标准但更冗长且性能较低的JavaScript。 */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* 指定调试器查找参考源代码的根路径。 */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* 指定调试器应该定位映射文件的位置，而不是生成的位置。 */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* 在生成的JavaScript内的源映射中包含源代码。 */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* 在输出文件的开头发出UTF-8字节顺序标记（BOM）。 */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* 设置发出文件的换行符。 */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* 禁止发出在其JSDoc注释中具有'@internal'的声明。 */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* 禁止在编译输出中生成自定义辅助函数，如'__extends'。 */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* 如果报告了任何类型检查错误，则禁止发出文件。 */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* 禁止在生成的代码中擦除'const enum'声明。 */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* 指定生成的声明文件的输出目录。 */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

    /* 互操作约束 */
    /* Interop Constraints */
    // "isolatedModules": true,                          /* 确保每个文件可以安全地转译，而不依赖其他导入。 */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* 不转换或省略任何未标记为仅类型的导入或导出，确保它们根据'module'设置以输出文件的格式编写。 */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* 要求对导出进行足够的注释，以便其他工具可以轻松生成声明文件。 */
    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    // "erasableSyntaxOnly": true,                       /* 不允许不属于ECMAScript的运行时构造。 */
    // "erasableSyntaxOnly": true,                       /* Do not allow runtime constructs that are not part of ECMAScript. */
    // "allowSyntheticDefaultImports": true,             /* 当模块没有默认导出时，允许'import x from y'。 */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    // "esModuleInterop": true,                             /* 发出额外的JavaScript以简化对导入CommonJS模块的支持。这为类型兼容性启用了'allowSyntheticDefaultImports'。 */
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    // "preserveSymlinks": true,                         /* 禁止将符号链接解析为其真实路径。这将与此中的相同标志相关。 */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    // "forceConsistentCasingInFileNames": true,            /* 确保导入中的大小写正确。 */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* 类型检查 */
    /* Type Checking */
    // "strict": true,                                      /* 启用所有严格类型检查选项。 */
    "strict": true /* Enable all strict type-checking options. */,
    // "noImplicitAny": true,                            /* 为具有隐含'any'类型的表达式和声明启用错误报告。 */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* 在类型检查时考虑'null'和'undefined'。 */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* 分配函数时，检查以确保参数和返回值是子类型兼容的。 */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* 检查'bind'、'call'和'apply'方法的参数是否与原始函数匹配。 */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* 检查在构造函数中声明但未设置的类属性。 */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "strictBuiltinIteratorReturn": true,              /* 内置迭代器使用'undefined'而不是'any'作为'TReturn'类型实例化。 */
    // "strictBuiltinIteratorReturn": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
    // "noImplicitThis": true,                           /* 当'this'被赋予类型'any'时启用错误报告。 */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* 默认将catch子句变量设为'unknown'而不是'any'。 */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* 确保始终发出'use strict'。 */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* 当局部变量未被读取时启用错误报告。 */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* 当函数参数未被读取时引发错误。 */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* 按原样解释可选属性类型，而不是添加'undefined'。 */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* 为函数中未明确返回的代码路径启用错误报告。 */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* 为switch语句中的贯穿情况启用错误报告。 */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* 使用索引访问时向类型添加'undefined'。 */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* 确保派生类中的覆盖成员标有覆盖修饰符。 */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* 强制使用索引访问器来访问使用索引类型声明的键。 */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* 禁用未使用标签的错误报告。 */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* 禁用不可达代码的错误报告。 */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* 完整性 */
    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* 跳过TypeScript附带的.d.ts文件的类型检查。 */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    // "skipLibCheck": true                                 /* 跳过所有.d.ts文件的类型检查。 */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  }
}
